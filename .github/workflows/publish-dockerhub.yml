name: Publish to Docker Hub

on:
    push:
        tags:
            - "v*" # Trigger when version tags are pushed
    workflow_dispatch: # Allow manual trigger
        inputs:
            version:
                description: "Version number (e.g.: v1.0.0)"
                required: true
                default: "latest"

env:
    DOCKERHUB_LOGIN_USERNAME: ${{ secrets.DOCKERHUB_LOGIN_USERNAME }}
    DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
    PROJECT_NAME: gc-qa-rag

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
            issues: write
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_LOGIN_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract version
              id: version
              run: |
                  if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
                  else
                    echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
                  fi

            - name: Build and push Server image
              uses: docker/build-push-action@v5
              with:
                  context: ./sources/gc-qa-rag-server
                  push: true
                  tags: |
                      ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-server:${{ steps.version.outputs.version }}
                      ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-server:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push ETL image
              uses: docker/build-push-action@v5
              with:
                  context: ./sources/gc-qa-rag-etl
                  push: true
                  tags: |
                      ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-etl:${{ steps.version.outputs.version }}
                      ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-etl:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Build and push Frontend image
              uses: docker/build-push-action@v5
              with:
                  context: ./sources/gc-qa-rag-frontend
                  push: true
                  tags: |
                      ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:${{ steps.version.outputs.version }}
                      ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:latest
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Create Release
              if: github.event_name != 'workflow_dispatch'
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  gh release create ${{ steps.version.outputs.version }} \
                    --title "Release ${{ steps.version.outputs.version }}" \
                    --notes "## üöÄ GC-QA-RAG ${{ steps.version.outputs.version }}

                  ### üì¶ Docker Images

                  This release includes the following Docker images:

                  - \`${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-server:${{ steps.version.outputs.version }}\`
                  - \`${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-etl:${{ steps.version.outputs.version }}\`
                  - \`${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:${{ steps.version.outputs.version }}\`

                  ### üê≥ Quick Deployment

                  \`\`\`bash
                  # Deploy ETL service using Docker Hub images
                  cd sources/gc-qa-rag-etl/deploy
                  # Edit docker-compose.dockerhub.yml file, uncomment environment variables and fill in your API keys
                  # Start ETL service
                  docker compose -f docker-compose.dockerhub.yml up -d

                  # Deploy RAG service using Docker Hub images
                  cd sources/gc-qa-rag-server/deploy
                  # Edit docker-compose.dockerhub.yml file, uncomment environment variables and fill in your API keys
                  # Start RAG service
                  docker compose -f docker-compose.dockerhub.yml up -d
                  \`\`\`

                  ### üìö Documentation

                  - [Deployment Guide](https://grapecity-ai.github.io/gc-qa-rag/en/2-development-tutorial/1-docker-deployment/)
                  - [Project Documentation](https://grapecity-ai.github.io/gc-qa-rag/en/)"
